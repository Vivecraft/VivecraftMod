plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    bundle {
        // bundle command, to copy jar contents with the shadow plugin
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}


dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2:natives-linux")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2:natives-macos")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2:natives-windows")

    forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:3.3.1")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:3.3.1:natives-linux")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:3.3.1:natives-windows")

    // shadow the natives
    bundle("org.lwjgl:lwjgl-openvr:3.3.2") { transitive = false }
    bundle("org.lwjgl:lwjgl-openvr:3.3.2:natives-linux") { transitive = false }
    bundle("org.lwjgl:lwjgl-openvr:3.3.2:natives-macos") { transitive = false }
    bundle("org.lwjgl:lwjgl-openvr:3.3.2:natives-windows") { transitive = false }

    bundle("org.lwjgl:lwjgl-openxr:3.3.1") { transitive = false }
    bundle("org.lwjgl:lwjgl-openxr:3.3.1:natives-linux") { transitive = false }
    bundle("org.lwjgl:lwjgl-openxr:3.3.1:natives-windows") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [
        project.configurations.shadowCommon,
        project.configurations.bundle
    ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('neoforge')
    atAccessWideners.add("vivecraft.accesswidener")
}

jar {
    archiveClassifier.set("dev")
    manifest {
        attributes(
            'Main-Class': "org.vivecraft.LaunchPopup"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
