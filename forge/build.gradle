plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "vivecraft.mixins.json"
        mixinConfig "vivecraft.alexmobs.mixins.json"
        mixinConfig "vivecraft.blur.mixins.json"
        mixinConfig "vivecraft.bedrockify.mixins.json"
        mixinConfig "vivecraft.cataclysm.mixins.json"
        mixinConfig "vivecraft.dynamicfps.mixins.json"
        mixinConfig "vivecraft.sodium.mixins.json"
        mixinConfig "vivecraft.forge.sodium.mixins.json"
        mixinConfig "vivecraft.iris.mixins.json"
        mixinConfig "vivecraft.physicsmod.mixins.json"
        mixinConfig "vivecraft.rei.mixins.json"
        mixinConfig "vivecraft.resolutioncontrol.mixins.json"
        mixinConfig "vivecraft.sereneseasons.mixins.json"
        mixinConfig "vivecraft.optifine.mixins.json"

        mixinConfig "vivecraft.forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    bundle {
        // bundle command, to copy jar contents with the shadow plugin
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}


dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // modCompileOnly("maven.modrinth:rubidium:0.6.5")
    // modCompileOnly("maven.modrinth:oculus:1.20-1.6.4")

    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2:natives-linux")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2:natives-macos")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openvr:3.3.2:natives-windows")

    forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:3.3.1")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:3.3.1:natives-linux")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-openxr:3.3.1:natives-windows")

    // shadow the natives
    bundle("org.lwjgl:lwjgl-openvr:3.3.2") { transitive = false }
    bundle("org.lwjgl:lwjgl-openvr:3.3.2:natives-linux") { transitive = false }
    bundle("org.lwjgl:lwjgl-openvr:3.3.2:natives-macos") { transitive = false }
    bundle("org.lwjgl:lwjgl-openvr:3.3.2:natives-windows") { transitive = false }

    bundle("org.lwjgl:lwjgl-openxr:3.3.1") { transitive = false }
    bundle("org.lwjgl:lwjgl-openxr:3.3.1:natives-linux") { transitive = false }
    bundle("org.lwjgl:lwjgl-openxr:3.3.1:natives-windows") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [
        project.configurations.shadowCommon,
        project.configurations.bundle
    ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set('forge')
}

jar {
    archiveClassifier.set("dev")
    manifest {
        attributes(
            'Main-Class': "org.vivecraft.LaunchPopup"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
